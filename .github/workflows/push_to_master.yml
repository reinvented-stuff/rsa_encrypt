name: Bash

on:
  push:
    branches: [ master ]

jobs:

  build:
    name: Build master branch
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check if .version file exists
      run: if [[ -f .version ]]; then exit 0; else exit 2; fi

    - name: Read out .version file
      id: readversionfile
      run: echo "::set-output name=desiredversion::$(cat .version)"

    - name: Verify version
      run: echo "${{steps.readversionfile.outputs.desiredversion}}"

    - name: Lookup planned tag
      id: tagexists
      run: |
        echo "::set-output name=tagexists::$(curl -s -X GET -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --url https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{steps.readversionfile.outputs.desiredversion}} | jq .object.sha)"
    
    - name: Check if planned tag doesn't exist yet
      run: if [[ "${{ steps.tagexists.outputs.tagexists }}" == "null" ]]; then exit 0; else exit 2; fi

    - name: Build
      run: make build

    - name: Generate changelog
      id: generate_changelog
      shell: bash
      run: |
        described=$(git describe --tags || git rev-list --max-parents=0 HEAD)
        described_parts=( ${described//-/ } )
        current_tag=${described_parts[0]}
        
        changelog_filename=".changelog"
        release_changelog_filename=".release_changelog"
        echo "current_tag=${current_tag}"

        echo "Listing current changes..."
        git log --pretty=oneline --format='%w(1000)* %cd %an <%ae>%n%w(60,0,2)- %s%n' --date="format:%a %b %d %Y" "$current_tag"..HEAD | tee "${changelog_filename}"
        git log --pretty=oneline --format='%w(1000)**%cd %an <%ae>**%n%w(60,0,2)- %s%n' --date="format:%a %b %d %Y" "$current_tag"..HEAD | tee "${release_changelog_filename}"
        
        echo "Changelog file..."
        cat .changelog

        echo "Preparing a GitHub Release Changelog"
        cat << EOF > "${release_changelog_filename}"
        Automatically generated release with assets.

        Changelog:
        $(cat "${release_changelog_filename}")
        EOF

        echo "::set-output name=changelog_filename::${changelog_filename}"
        echo "::set-output name=release_changelog_filename::${release_changelog_filename}"

    - name: Display changelog
      run: echo "${{ steps.generate_changelog.outputs.changelog }}"

    - name: Setup RPM Build environment
      id: setup_rpmbuild_env
      shell: bash
      run: |

        version="$(cat .version)"
        sudo apt-get update
        sudo apt-get install rpm

        make build
        make compress

        # rpmdev-setuptree
        mkdir /home/runner/rpmbuild
        mkdir -pv /home/runner/rpmbuild/BUILD
        mkdir -pv /home/runner/rpmbuild/BUILDROOT
        mkdir -pv /home/runner/rpmbuild/RPMS
        mkdir -pv /home/runner/rpmbuild/SOURCES
        mkdir -pv /home/runner/rpmbuild/SPECS
        mkdir -pv /home/runner/rpmbuild/SRPMS
        
        cp -v ".rpm/rsaenc.spec.tpl" /home/runner/rpmbuild/SPECS
        mv -v /home/runner/rpmbuild/SPECS/rsaenc.spec.tpl /home/runner/rpmbuild/SPECS/rsaenc.spec
        
        sed -i"" \
          -e "s/__VERSION__/${version}/" \
          -e "s/__SOURCE_TARGZ_FILENAME__/rsaenc-${version}.tar.gz/" \
          /home/runner/rpmbuild/SPECS/rsaenc.spec
        
        cat "${{steps.generate_changelog.outputs.changelog_filename}}" >> /home/runner/rpmbuild/SPECS/rsaenc.spec
        cat -n /home/runner/rpmbuild/SPECS/rsaenc.spec

        cp -v "rsaenc-${version}.tar.gz" /home/runner/rpmbuild/SOURCES

    - name: Build RPM package
      id: build_rpm_package
      shell: bash
      run: |
        cd /home/runner
        rpmbuild -v -ba "rpmbuild/SPECS/rsaenc.spec"

    - name: Verify RPM package
      id: verify_rpm_package
      run: |
        version="$(cat .version)"
        ls -la /home/runner/rpmbuild/RPMS/x86_64/rsaenc-${version}-1.x86_64.rpm
        echo "::set-output name=path_to_rpm_file::/home/runner/rpmbuild/RPMS/x86_64/rsaenc-${version}-1.x86_64.rpm"
        echo "::set-output name=rpm_filename::rsaenc-${version}-1.x86_64.rpm"

    - name: Setup DEB Build environment
      id: setup_debbuild_env
      shell: bash
      run: |

        version="$(cat .version)"
        size="$(stat --printf="%s" rsaenc)"

        mkdir -v /home/runner/debbuild
        mkdir -v /home/runner/debbuild/DEBIAN
        mkdir -vp /home/runner/debbuild/usr/bin
        mkdir -vp "/home/runner/debbuild/usr/share/doc/rsaenc-${version}"

        cp -v ".deb/control.tpl" /home/runner/debbuild/DEBIAN
        mv -v /home/runner/debbuild/DEBIAN/control.tpl /home/runner/debbuild/DEBIAN/control
        
        cp -v "rsaenc-${version}/rsaenc" /home/runner/debbuild/usr/bin/
        cp -v "rsaenc-${version}/README.md" "/home/runner/debbuild/usr/share/doc/rsaenc-${version}"

        sed -i"" \
          -e "s/__VERSION__/${version}/" \
          -e "s/__SIZE__/${size}/" \
          /home/runner/debbuild/DEBIAN/control
        
        cat -n /home/runner/debbuild/DEBIAN/control

    - name: Build DEB package
      id: build_deb_package
      shell: bash
      run: |
        version="$(cat .version)"

        cd /home/runner
        dpkg-deb --build debbuild
      
        mv debbuild.deb rsaenc-${version}_amd64.deb

    - name: Verify DEB package
      id: verify_deb_package
      run: |
        version="$(cat .version)"
        ls -la "/home/runner/rsaenc-${version}_amd64.deb"
        echo "::set-output name=path_to_deb_file::/home/runner/rsaenc-${version}_amd64.deb"
        echo "::set-output name=deb_filename::rsaenc-${version}_amd64.deb"

    - name: Install DEB package
      id: install_deb_package
      run: |
        sudo dpkg -i "${{steps.verify_deb_package.outputs.path_to_deb_file}}"
        ls -la /usr/bin/rsaenc
        ls -la /usr/share/doc/rsaenc*
        rsaenc -h

    - name: Create a new tag
      run: |
        curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
        -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        -H 'content-type: application/json' \
        --data '{"tag": "${{steps.readversionfile.outputs.desiredversion}}",
          "message": "Pipeline build tag",
          "object": "${{ github.sha }}",
          "type": "commit",
          "tagger": {
            "name": "Alice from Wonderland",
            "email": "noreply@localhost.localdomain",
            "date": "${{steps.timestamp.outputs.timestamp}}"
          }'

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{steps.readversionfile.outputs.desiredversion}}
        release_name: Release ${{steps.readversionfile.outputs.desiredversion}}
        body_path: ${{steps.generate_changelog.outputs.release_changelog_filename}}
        draft: false
        prerelease: false

    - name: Upload a Release Asset (rsaenc)
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./rsaenc-${{ steps.readversionfile.outputs.desiredversion }}/rsaenc
        asset_name: rsaenc
        asset_content_type: application/octet-stream

    - name: Upload a Release Asset (RPM package)
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.verify_rpm_package.outputs.path_to_rpm_file }}
        asset_name: ${{ steps.verify_rpm_package.outputs.rpm_filename }}
        asset_content_type: application/octet-stream

    - name: Upload a Release Asset (DEB package)
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.verify_deb_package.outputs.path_to_deb_file }}
        asset_name: ${{ steps.verify_deb_package.outputs.deb_filename }}
        asset_content_type: application/octet-stream

    - name: Upload RPM package to repository
      id: upload_rpm_to_repository
      run: |
        export RSYNC_PASSWORD="${{ secrets.RSYNC_PASSWORD }}"
        rsync \
          -raz -vv \
          --port "${{ secrets.RSYNC_PORT }}" \
          "${{steps.verify_rpm_package.outputs.path_to_rpm_file}}" \
          ${{ secrets.RSYNC_USERNAME }}@${{ secrets.RSYNC_HOSTNAME }}::${{ secrets.RSYNC_PATH_RPM_EL7 }}

    - name: Upload DEB package to repository
      id: upload_deb_to_repository
      run: |
        export RSYNC_PASSWORD="${{ secrets.RSYNC_PASSWORD }}"
        rsync \
          -raz -vv \
          --port "${{ secrets.RSYNC_PORT }}" \
          "${{steps.verify_deb_package.outputs.path_to_deb_file}}" \
          ${{ secrets.RSYNC_USERNAME }}@${{ secrets.RSYNC_HOSTNAME }}::${{ secrets.RSYNC_PATH_DEB }}
